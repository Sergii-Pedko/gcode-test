
/* it() (или test() - it-является элиасом внутри test - короче по сути это ОДНО И ТО ЖЕ !!) - ф-ция ТЕСТИРОВЩИК - принимает ТРИ Аргумента
          1)  '17 и в Африке 17' или  'Проверяем реверс строки7' => ОПИСАНИЕ ТЕСТА
          2)  () => {}  => Ф-ция которая и ОПИСЫВАЕТ Проверку кода
          3)  НЕобязательный параметр  - если мы тестируем АССИНХРОННЫЙ КОД => 10 ms
                                                                Cколько милисекунд ждать ответа 

it('17 и в Африке 17',
   () => {
  ЧТО хотим проверить
           expect(17).toEqual(18); заведомо ошибка
                      РАВНО(18) - сама ПРОВЕРКА
});

---------------------------------------------------------------------------------------------
toBe() - слабый метод - для сравнения ПРИМИТИВОВ
toEqual()) для сравнения Объектов  и Массивов
---------------------------------------------------------------------------------------------*/ 

// импортируем ф-ции из calculator.js  (ф-ция-getSum была экспортирована ДЕФОЛТНО - поэтому ИМПОРТИРУЕТСЯ вне фигурных скобок !!! )

import getSum, {getSquaredArray, getOddNumbers} from './calculator.js'; 

// ТЕСТ№1-jest - ф-ции getSquaredArray
it(
  'Ф-ция возводит в квадрат все элементы входящего массива чисел',
  () => {
    let result = getSquaredArray([2, 4, 6]); //Выполняем ф-цию

     expect(result).toEqual([4, 16, 36]);   
  }
);

// ТЕСТ№2-jest - ф-ции getOddNumbers
it(
  'Ф-ция фильтрует входящий массив чисел, оставляет только нечетные',
  () => {
    let result = getOddNumbers([1, 2, 3, 4, 5]); //Выполняем ф-цию

     expect(result).toEqual([1, 3, 5]);   
  }
);

// ТЕСТ№3-jest - ф-ции getSum
it(
  'Ф-ция возвращает сумму двух чисел',
  () => {
    let result = getSum(2, 3); //Выполняем ф-цию

     expect(result).toEqual(5);   
  }
);




//npm test js/lesson13-modules_tests_jest/task2/calculator.test.js